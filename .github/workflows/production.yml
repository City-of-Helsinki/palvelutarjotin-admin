name: Build & Production & Smoke Tests
on:
  push:
    tags:
      - 'release-*'

env:
  CONTAINER_REGISTRY: ghcr.io
  CONTAINER_REGISTRY_USER: ${{ secrets.GHCR_CONTAINER_REGISTRY_USER }}
  CONTAINER_REGISTRY_PASSWORD: ${{ secrets.GHCR_TOKEN }}
  CONTAINER_REGISTRY_REPO: ghcr.io/city-of-helsinki/${{ github.event.repository.name }}
  REPO_NAME: ${{ github.event.repository.name }}
  KUBECONFIG_RAW: ${{ secrets.KUBECONFIG_RAW_STABLE }}
  BUILD_ARTIFACT_FOLDER: 'build_artifacts'
  SERVICE_ARTIFACT_FOLDER: 'service_artifacts'
  SERVICE_PORT: 80
  K8S_REQUEST_CPU: 1m
  K8S_REQUEST_RAM: 10Mi
  K8S_LIMIT_CPU: 5m
  K8S_LIMIT_RAM: 20Mi
  K8S_REPLICACOUNT: 2
  PUBLIC_URL: https://${{ secrets.ENVIRONMENT_URL_STABLE }}
jobs:
  build:
    runs-on: ubuntu-latest
    name: Build
    steps:
      - uses: actions/checkout@v2
      - name: Build
        uses: andersinno/kolga-build-action@v2
        env:
          DOCKER_IMAGE_NAME: ${{ env.REPO_NAME }}-production
          DOCKER_BUILD_ARG_REACT_APP_SENTRY_DSN: ${{ secrets.GH_SENTRY_DSN }}
          DOCKER_BUILD_ARG_REACT_APP_ENVIRONMENT: 'production'
          DOCKER_BUILD_ARG_REACT_APP_OIDC_AUTHORITY: 'https://api.hel.fi/sso'
          DOCKER_BUILD_ARG_REACT_APP_OIDC_CLIENT_ID: 'kultus-provider'
          DOCKER_BUILD_ARG_REACT_APP_OIDC_SCOPE: 'openid profile https://api.hel.fi/auth/kultusapi'
          DOCKER_BUILD_ARG_REACT_APP_API_URI: 'https://palvelutarjotin-api.prod.kuva.hel.ninja/graphql'
          DOCKER_BUILD_ARG_REACT_APP_CMS_URI: 'https://kultus.content.api.hel.fi/graphql'
          DOCKER_BUILD_ARG_REACT_APP_API_REPORT_URI: 'https://palvelutarjotin-api.prod.kuva.hel.ninja/reports'
          DOCKER_BUILD_ARG_REACT_APP_LINKEDEVENTS_API_URI: 'https://api.hel.fi/linkedevents/v1'
          DOCKER_BUILD_ARG_REACT_APP_LANGUAGE_CIMODE_VISIBLE: 'false'
          DOCKER_BUILD_ARG_REACT_APP_HEADLESS_CMS_ENABLED: 'true'

  production:
    runs-on: ubuntu-latest
    name: Production
    steps:
      - uses: actions/checkout@v2
      - uses: andersinno/kolga-setup-action@v2

      - name: Deploy
        uses: andersinno/kolga-deploy-action@v2
        with:
          track: 'stable'
        env:
          K8S_NAMESPACE: ${{ secrets.K8S_NAMESPACE_STABLE }}
          K8S_ADDITIONAL_HOSTNAMES: ${{ secrets.K8S_ADDITIONAL_HOSTNAMES }}
          ENVIRONMENT_URL: ${{ env.PUBLIC_URL }}
          DOCKER_IMAGE_NAME: ${{ env.REPO_NAME }}-production
      - name: production deploy notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: Deployer
          SLACK_ICON: https://a.slack-edge.com/80588/img/services/outgoing-webhook_48.png
          SLACK_TITLE: ${{ env.PUBLIC_URL }} has been updated!
          SLACK_MESSAGE: 'A new version of Kultus Admin has been deployed to production! ${{ env.PUBLIC_URL }} :tada: :tada: '
          SLACK_CHANNEL: pomodori
        if: success()
      - name: production deploy failure notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: Deployer
          SLACK_ICON: https://a.slack-edge.com/80588/img/services/outgoing-webhook_48.png
          SLACK_TITLE: Deploying to ${{ env.PUBLIC_URL }} has *FAILED!*
          SLACK_MESSAGE: Deploying to ${{ env.PUBLIC_URL }} has *FAILED!*
          SLACK_CHANNEL: pomodori
        if: failure()
  smoke-tests:
    runs-on: windows-latest
    needs: production
    name: Smoke tests for production
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.2
        with:
          node-version: '12'
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        run: yarn --prefer-offline --frozen-lockfile --check-files --production=false
      - name: Run TestCafe tests
        id: testcafe
        run: yarn browser-test:ci
        env:
          BROWSER_TESTS_LOCAL_ENV_URL: https://${{ secrets.ENVIRONMENT_URL_STABLE }}
      - name: Upload screenshots and videos of failed tests to artifact
        uses: actions/upload-artifact@v2
        with:
          name: report
          path: report/
        if: always() && steps.testcafe.outcome == 'failure'
